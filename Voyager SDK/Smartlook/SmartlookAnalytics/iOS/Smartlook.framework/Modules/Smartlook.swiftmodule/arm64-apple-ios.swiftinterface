// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Smartlook
import AVFoundation
import CoreData
import CoreGraphics
import CoreMedia
import CoreVideo
import Foundation
import MapKit
import MetalKit
import OSLog
import QuartzCore
import SceneKit
@_exported import Smartlook
import SpriteKit
import Swift
import UIKit
import Vision
import WebKit
import _Concurrency
extension UIKit.UIImage {
  convenience public init?(color: Smartlook.PlatformColor, size: CoreGraphics.CGSize = CGSize(width: 1, height: 1))
}
extension Smartlook.Smartlook {
  @available(swift, obsoleted: 0.1)
  @objc(trackCustomEventWithName:) dynamic public class func objcTrackCustomEvent(name: Swift.String)
  @objc(trackCustomEventWithName:props:) dynamic public class func trackCustomEvent(name: Swift.String, props: [Swift.String : Swift.String]? = nil)
}
extension Smartlook.Smartlook {
  @objc(startTimedCustomEventWithName:props:) dynamic public class func startTimedCustomEvent(name: Swift.String, props: [Swift.String : Swift.String]? = nil) -> Swift.String
  @objc(trackTimedCustomEventWithEventId:props:) dynamic public class func trackTimedCustomEvent(eventId: Swift.String, props: [Swift.String : Swift.String]? = nil)
  @objc(trackTimedCustomEventCancelWithEventId:reason:props:) dynamic public class func trackTimedCustomEventCancel(eventId: Swift.String, reason: Swift.String?, props: [Swift.String : Swift.String]?)
}
extension Smartlook.Smartlook {
  public enum NavigationEventType : Swift.String {
    case enter
    case exit
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public class func trackNavigationEvent(withControllerId name: Swift.String, type: Smartlook.Smartlook.NavigationEventType)
}
public typealias SLNavigationType = Foundation.NSString
extension Smartlook.Smartlook {
  @available(swift, obsoleted: 0.1)
  @objc(trackNavigationEventWithControllerId:type:) dynamic public class func objcTrackNavigationEvent(controllerId: Swift.String, type: Foundation.NSString)
}
extension Smartlook.Smartlook {
  public class func setGlobalEventProperty(value: Swift.String, forName name: Swift.String, options: Smartlook.Smartlook.SLPropertyOption)
  @objc(setGlobalEventPropertyValue:forName:immutable:) dynamic public class func setGlobalEventProperty(value: Swift.String, forName name: Swift.String, immutable: Swift.Bool = false)
  @objc(removeGlobalEventPropertyForName:) dynamic public class func removeGlobalEventProperty(forName name: Swift.String)
  @objc(clearGlobalEventProperties) dynamic public class func clearGlobalEventProperties()
}
extension Smartlook.Smartlook {
  @available(*, deprecated, message: "Use `setGlobalEventProperty(value:forName:immutable:)` instead.")
  @objc(setGlobalEventPropertyValue:forName:withOptions:) dynamic public class func objcSetGlobalEventProperty(value: Swift.String, forName name: Swift.String, options: Smartlook.Smartlook.SLPropertyOption)
  @available(swift, obsoleted: 0.1)
  @objc(setGlobalEventPropertyValue:forName:) dynamic public class func objcSetGlobalEventProperty(value: Swift.String, forName name: Swift.String)
}
@objc(SLSensitiveData) public protocol SensitiveData {
}
@objc(SLNonSensitiveData) public protocol NonSensitiveData {
}
@_inheritsConvenienceInitializers @objc(Smartlook) public class Smartlook : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension Smartlook.Smartlook {
  @objc(SLAmplitudeIntegration) public class AmplitudeIntegration : Smartlook.Smartlook.Integration {
    @objc override public var name: Swift.String {
      @objc get
    }
    @objc override public var isValid: Swift.Bool {
      @objc get
    }
    @objc(initIntegrationWith:) public init(integrationWith amplitudeInstance: Any)
    @objc deinit
  }
}
extension Smartlook.Smartlook {
  @objc(SLDashboardVisitorURLChangedNotification) dynamic public class var dashboardVisitorURLChanged: Foundation.NSNotification.Name {
    @objc get
  }
  @objc(setUserIdentifier:) dynamic public class func setUserIdentifier(_ userIdentifier: Swift.String?)
  @objc public enum SLPropertyOption : Swift.Int {
    case `default` = 0
    case immutable = 1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public class func setSessionProperty(value: Swift.String, forName name: Swift.String, options: Smartlook.Smartlook.SLPropertyOption? = nil)
  @objc(removeSessionPropertyForName:) dynamic public class func removeSessionProperty(forName name: Swift.String)
  @objc(clearSessionProperties) dynamic public class func clearSessionProperties()
}
extension Smartlook.Smartlook {
  @available(swift, obsoleted: 0.1)
  @objc(setSessionPropertyValue:forName:withOptions:) dynamic public class func objcSetSessionProperty(value: Swift.String, forName name: Swift.String, options: Smartlook.Smartlook.SLPropertyOption)
  @available(swift, obsoleted: 0.1)
  @objc(setSessionPropertyValue:forName:) dynamic public class func objcSetSessionProperty(value: Swift.String, forName name: Swift.String)
}
extension Smartlook.Smartlook {
  @objc(startRecording) dynamic public class func startRecording()
  @objc(stopRecording) dynamic public class func stopRecording()
  @objc(isRecording) dynamic public class func isRecording() -> Swift.Bool
}
extension Smartlook.Smartlook {
  @available(swift, obsoleted: 0.1)
  @objc(setEventTrackingModeTo:) dynamic public class func objcSetEventTrackingMode(to mode: Foundation.NSString)
  @available(swift, obsoleted: 0.1)
  @objc(setEventTrackingModesTo:) dynamic public class func objcSetEventTrackingModes(to modes: [Foundation.NSString])
  @available(swift, obsoleted: 0.1)
  @objc(currentEventTrackingModes) dynamic public class func objcCurrentEventTrackingModes() -> [Foundation.NSString]
}
extension Smartlook.Smartlook {
  @objc(SLDashboardSessionURLChangedNotification) dynamic public class var dashboardSessionURLChanged: Foundation.NSNotification.Name {
    @objc get
  }
  @objc(resetSessionAndUser:) dynamic public class func resetSession(resetUser: Swift.Bool = false)
}
extension Smartlook.Smartlook {
  @objc(SLFirebaseAnalyticsIntegration) public class FirebaseAnalyticsIntegration : Smartlook.Smartlook.Integration {
    @objc override public var name: Swift.String {
      @objc get
    }
    @objc override public var isValid: Swift.Bool {
      @objc get
    }
    @objc(initIntegrationWith:) public init(integrationWith analyticsClass: Swift.AnyClass)
    @objc deinit
  }
}
public enum BridgeTechnology : Swift.String {
  case reactNative
  case flutter
  case cordova
  case ionic
  case unity
  case unreal
  case xamarin
  case other
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
infix operator <~ : AssignmentPrecedence
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var slSensitive: Swift.Bool {
    @objc get
    @objc set
  }
}
extension Smartlook.Smartlook {
  @objc(getDashboardSessionURLWithCurrentTimestamp:) dynamic public class func getDashboardSessionURL(withCurrentTimestamp withTimestamp: Swift.Bool = false) -> Foundation.URL?
  @objc(getDashboardVisitorURL) dynamic public class func getDashboardVisitorURL() -> Foundation.URL?
}
extension Smartlook.Smartlook {
  @objc(setBlacklistedItemsColor:) dynamic public class func setBlacklistedItem(color: Smartlook.PlatformColor)
  @objc(registerBlacklistedObject:) dynamic public class func registerBlacklisted(object: Any)
  @objc(unregisterBlacklistedObject:) dynamic public class func unregisterBlacklisted(object: Any)
  @objc(registerWhitelistedObject:) dynamic public class func registerWhitelisted(object: Any)
  @objc(unregisterWhitelistedObject:) dynamic public class func unregisterWhitelisted(object: Any)
}
public typealias PlatformApplication = UIKit.UIApplication
public typealias PlatformScreen = UIKit.UIScreen
public typealias PlatformResponder = UIKit.UIResponder
public typealias PlatformImage = UIKit.UIImage
public typealias PlatformColor = UIKit.UIColor
public typealias PlatformFont = UIKit.UIFont
@available(iOS 13, tvOS 13, *)
public typealias PlatformScene = UIKit.UIScene
@available(iOS 13, tvOS 13, *)
public typealias PlatformWindowScene = UIKit.UIWindowScene
public typealias PlatformWindow = UIKit.UIWindow
public typealias PlatformView = UIKit.UIView
public typealias PlatformViewController = UIKit.UIViewController
public typealias PlatformImageView = UIKit.UIImageView
public typealias PlatformScrollView = UIKit.UIScrollView
public typealias PlatformCollectionView = UIKit.UICollectionView
public typealias PlatformTableView = UIKit.UITableView
public typealias PlatformTableViewCell = UIKit.UITableViewCell
public typealias PlatformActivityIndicatorView = UIKit.UIActivityIndicatorView
public typealias PlatformVisualEffectView = UIKit.UIVisualEffectView
public typealias PlatformLabel = UIKit.UILabel
public typealias PlatformTextView = UIKit.UITextView
public typealias PlatformTextField = UIKit.UITextField
public typealias PlatformButton = UIKit.UIButton
public typealias PlatformPageControl = UIKit.UIPageControl
public typealias PlatformImageRendererFormat = UIKit.UIGraphicsImageRendererFormat
public typealias PlatformImageRenderer = UIKit.UIGraphicsImageRenderer
public typealias PlatformBezierPath = UIKit.UIBezierPath
public typealias PlatformPickerView = UIKit.UIPickerView
public typealias PlatformRefreshControl = UIKit.UIRefreshControl
public typealias PlatformSwitch = UIKit.UISwitch
public typealias PlatformSlider = UIKit.UISlider
public typealias PlatformStepper = UIKit.UIStepper
public typealias PlatformDatePicker = UIKit.UIDatePicker
extension Smartlook.Smartlook {
  @objc(SLMixpanelIntegration) public class MixpanelIntegration : Smartlook.Smartlook.Integration {
    @objc override public var name: Swift.String {
      @objc get
    }
    @objc override public var isValid: Swift.Bool {
      @objc get
    }
    @objc(initIntegrationWith:) public init(integrationWith mixpanelInstance: Any)
    @objc deinit
  }
}
extension Smartlook.Smartlook {
  @objc(SLFirebaseCrashlyticsIntegration) public class FirebaseCrashlyticsIntegration : Smartlook.Smartlook.Integration {
    @objc override public var name: Swift.String {
      @objc get
    }
    @objc override public var isValid: Swift.Bool {
      @objc get
    }
    @objc(initIntegrationWith:) public init(integrationWith crashlytics: Any)
    @objc deinit
  }
}
extension Smartlook.Smartlook {
  public enum RenderingModeOption : Swift.String {
    case none
    case colorWireframe
    case blueprintWireframe
    case iconBlueprintWireframe
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RenderingMode : Swift.String {
    case native
    case wireframe
    case noRendering
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public class func setRenderingMode(to renderingMode: Smartlook.Smartlook.RenderingMode, option: Smartlook.Smartlook.RenderingModeOption? = nil)
  public class func currentRenderingMode() -> Smartlook.Smartlook.RenderingMode
  public class func currentRenderingModeOption() -> Smartlook.Smartlook.RenderingModeOption
}
infix operator ?= : AssignmentPrecedence
infix operator ?+ : AdditionPrecedence
infix operator ≈ : DefaultPrecedence
extension Smartlook.Smartlook {
  public enum EventTrackingMode : Swift.String, Swift.Codable {
    case noTracking
    case fullTracking
    case ignoreUserInteractionEvents
    case ignoreNavigationInteractionEvents
    case ignoreRageClickEvents
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension Smartlook.Smartlook.EventTrackingMode : Swift.Comparable {
  public static func < (lhs: Smartlook.Smartlook.EventTrackingMode, rhs: Smartlook.Smartlook.EventTrackingMode) -> Swift.Bool
}
extension Smartlook.Smartlook {
  public class func setEventTrackingMode(to eventTrackingMode: Smartlook.Smartlook.EventTrackingMode)
  public class func setEventTrackingModes(to eventTrackingModes: [Smartlook.Smartlook.EventTrackingMode])
  public class func currentEventTrackingModes() -> [Smartlook.Smartlook.EventTrackingMode]
}
extension Smartlook.Smartlook {
  @_inheritsConvenienceInitializers @objc(SLSetupConfiguration) public class ObjCSetupConfiguration : ObjectiveC.NSObject {
    @objc public var apiKey: Swift.String
    @objc public var framerate: Swift.Int
    @objc public var enableAdaptiveFramerate: Swift.Bool
    @objc public var renderingMode: Foundation.NSString?
    @objc public var renderingModeOption: Foundation.NSString?
    @objc public var eventTrackingModes: [Foundation.NSString]?
    @objc public var resetSession: Swift.Bool
    @objc public var resetSessionAndUser: Swift.Bool
    @objc public var regionalStorage: Foundation.NSString?
    @objc public var enableIntegrations: [Smartlook.Smartlook.Integration]?
    @available(swift, obsoleted: 0.1)
    @objc(setInternalProps:) public func objcSetInternalProperties(_ props: Any)
    @objc(init) override dynamic public init()
    @objc(initWithKey:) public init(withKey: Swift.String)
    @available(swift, obsoleted: 0.1)
    @objc(configurationWithKey:) public class func objcConfiguration(withKey key: Swift.String) -> Smartlook.Smartlook.ObjCSetupConfiguration
    @objc deinit
  }
}
extension Smartlook.Smartlook {
  @available(swift, obsoleted: 0.1)
  @objc(setupWithConfiguration:) dynamic public class func objcSetup(configuration: Smartlook.Smartlook.ObjCSetupConfiguration)
  @available(swift, obsoleted: 0.1)
  @objc(setupAndStartRecordingWithConfiguration:) dynamic public class func objcSetupAndStartRecording(configuration: Smartlook.Smartlook.ObjCSetupConfiguration)
}
extension QuartzCore.CATransform3D : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension QuartzCore.CATransform3D : Swift.Equatable {
  public static func == (lhs: QuartzCore.CATransform3D, rhs: QuartzCore.CATransform3D) -> Swift.Bool
}
extension Smartlook.Smartlook {
  public enum Region : Swift.String {
    case eu
    case us
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension Smartlook.Smartlook {
  public struct SegmentMiddlewareOption : Swift.OptionSet {
    public let rawValue: Swift.UInt32
    public init(rawValue: Swift.UInt32)
    public static let track: Smartlook.Smartlook.SegmentMiddlewareOption
    public static let screen: Smartlook.Smartlook.SegmentMiddlewareOption
    public static let identify: Smartlook.Smartlook.SegmentMiddlewareOption
    public static let alias: Smartlook.Smartlook.SegmentMiddlewareOption
    public static let reset: Smartlook.Smartlook.SegmentMiddlewareOption
    public static let all: Smartlook.Smartlook.SegmentMiddlewareOption
    public static let `default`: Smartlook.Smartlook.SegmentMiddlewareOption
    public typealias ArrayLiteralElement = Smartlook.Smartlook.SegmentMiddlewareOption
    public typealias Element = Smartlook.Smartlook.SegmentMiddlewareOption
    public typealias RawValue = Swift.UInt32
  }
  public class func segmentSourceMiddleware(options option: Smartlook.Smartlook.SegmentMiddlewareOption, segResetEventType resetEventType: Swift.Int) -> Any?
  @available(swift, obsoleted: 0.1)
  @objc(segmentSourceMiddlewareWithOptions:whereSEGResetEventTypeIs:) dynamic public class func objcSegmentSourceMiddleware(options option: Swift.UInt32, segResetEventType resetEventType: Swift.Int) -> Any?
}
extension Smartlook.Smartlook {
  public class SetupConfiguration {
    final public let apiKey: Swift.String
    public var framerate: Swift.Int?
    public var enableAdaptiveFramerate: Swift.Bool?
    public var renderingMode: Smartlook.Smartlook.RenderingMode?
    public var renderingModeOption: Smartlook.Smartlook.RenderingModeOption?
    public var eventTrackingModes: [Smartlook.Smartlook.EventTrackingMode]?
    public var resetSession: Swift.Bool?
    public var resetSessionAndUser: Swift.Bool?
    public var regionalStorage: Smartlook.Smartlook.Region?
    public var enableIntegrations: [Smartlook.Smartlook.Integration]?
    public init(key: Swift.String)
    public func setInternalProps(_ props: Any)
    @objc deinit
  }
  public class func setup(configuration: Smartlook.Smartlook.SetupConfiguration)
  public class func setupAndStartRecording(configuration: Smartlook.Smartlook.SetupConfiguration)
}
@_inheritsConvenienceInitializers @objc(SLWireframeDataItem) public class WireframeDataItem : ObjectiveC.NSObject {
  @objc public var left: CoreGraphics.CGFloat
  @objc public var top: CoreGraphics.CGFloat
  @objc public var width: CoreGraphics.CGFloat
  @objc public var height: CoreGraphics.CGFloat
  @objc public var color: UIKit.UIColor?
  @objc override dynamic public init()
  @objc deinit
}
extension Smartlook.Smartlook {
  @available(swift, obsoleted: 0.1)
  @objc(setRenderingModeTo:) dynamic public class func objcSetRenderingMode(to mode: Foundation.NSString)
  @available(swift, obsoleted: 0.1)
  @objc(setRenderingModeTo:withOption:) dynamic public class func objcSetRenderingMode(to mode: Foundation.NSString, options: Foundation.NSString)
  @available(swift, obsoleted: 0.1)
  @objc(currentRenderingMode) dynamic public class func objcCurrentRenderingMode() -> Foundation.NSString
  @available(swift, obsoleted: 0.1)
  @objc(currentRenderingModeOption) dynamic public class func objcCurrentRenderingModeOption() -> Foundation.NSString
}
extension Smartlook.Smartlook {
  @objc(enableIntegrations:) dynamic public class func enable(integrations: [Smartlook.Smartlook.Integration])
  @objc(disableIntegrations:) dynamic public class func disable(integrations: [Smartlook.Smartlook.Integration])
  @objc(disableAllIntegrations) dynamic public class func disableAllIntegrations()
  @objc(currentlyEnabledIntegrations) dynamic public class func currentlyEnabledIntegrations() -> [Smartlook.Smartlook.Integration]
}
extension Smartlook.Smartlook {
  @objc(SLHeapIntegration) public class HeapIntegration : Smartlook.Smartlook.Integration {
    @objc override public var name: Swift.String {
      @objc get
    }
    @objc override public var isValid: Swift.Bool {
      @objc get
    }
    @objc(initIntegrationWith:) public init(integrationWith heapClass: Swift.AnyClass)
    @objc deinit
  }
}
@_inheritsConvenienceInitializers @objc(SLWireframeData) public class WireframeData : ObjectiveC.NSObject {
  @objc public var width: CoreGraphics.CGFloat
  @objc public var height: CoreGraphics.CGFloat
  @objc public var items: [Smartlook.WireframeDataItem]
  @objc override dynamic public init()
  @objc deinit
}
extension Smartlook.Smartlook {
  @_inheritsConvenienceInitializers @objc(SLIntegration) public class Integration : ObjectiveC.NSObject {
    @objc public var name: Swift.String {
      @objc get
    }
    @objc public var isValid: Swift.Bool {
      @objc get
    }
    @objc public var integratedObject: Any?
    @objc override dynamic public init()
    @objc deinit
  }
}
extension Smartlook.Smartlook {
  public static func registerDenied(_ object: Any)
  public static func unregisterDenied(_ object: Any)
  public static func registerAllowed(_ object: Any)
  public static func unregisterAllowed(_ object: Any)
  public static func isSensitive(_ view: Swift.AnyObject) -> Swift.Bool
}
@objc(SLBridgeInterface) public protocol BridgeInterface {
  @objc var sdkFramework: Swift.String? { get set }
  @objc var sdkFrameworkVersion: Swift.String? { get set }
  @objc var sdkFrameworkPluginVersion: Swift.String? { get set }
  @objc(obtainWireframeDataWithCompletion:) func obtainWireframeData(completion: (Smartlook.WireframeData?) -> Swift.Void)
}
extension Smartlook.Smartlook {
  @objc(registerBridgeInterface:) dynamic public class func register(bridgeInterface: Smartlook.BridgeInterface)
}
extension Smartlook.Smartlook.NavigationEventType : Swift.Equatable {}
extension Smartlook.Smartlook.NavigationEventType : Swift.Hashable {}
extension Smartlook.Smartlook.NavigationEventType : Swift.RawRepresentable {}
extension Smartlook.Smartlook.SLPropertyOption : Swift.Equatable {}
extension Smartlook.Smartlook.SLPropertyOption : Swift.Hashable {}
extension Smartlook.Smartlook.SLPropertyOption : Swift.RawRepresentable {}
extension Smartlook.BridgeTechnology : Swift.Equatable {}
extension Smartlook.BridgeTechnology : Swift.Hashable {}
extension Smartlook.BridgeTechnology : Swift.RawRepresentable {}
extension Smartlook.Smartlook.RenderingModeOption : Swift.Equatable {}
extension Smartlook.Smartlook.RenderingModeOption : Swift.Hashable {}
extension Smartlook.Smartlook.RenderingModeOption : Swift.RawRepresentable {}
extension Smartlook.Smartlook.RenderingMode : Swift.Equatable {}
extension Smartlook.Smartlook.RenderingMode : Swift.Hashable {}
extension Smartlook.Smartlook.RenderingMode : Swift.RawRepresentable {}
extension Smartlook.Smartlook.EventTrackingMode : Swift.Hashable {}
extension Smartlook.Smartlook.EventTrackingMode : Swift.RawRepresentable {}
extension Smartlook.Smartlook.Region : Swift.Equatable {}
extension Smartlook.Smartlook.Region : Swift.Hashable {}
extension Smartlook.Smartlook.Region : Swift.RawRepresentable {}
